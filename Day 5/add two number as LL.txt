ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = new ListNode();
        
        struct ListNode* prev = head;
        int carry = 0;
        int new_node_val = (l1->val)+(l2->val)+carry;
        if(new_node_val>=10){
            carry = 1;
            int new_node_new_val = new_node_val-10; 
            head->val = new_node_new_val;
        } 
        else{
            head->val = new_node_val;
        }
        l1 = l1->next;
        l2 = l2->next;
        while(l1 && l2){
            int new_node_val = (l1->val)+(l2->val)+carry;
            ListNode* new_node = new ListNode();
            new_node->next = NULL;
            if(new_node_val>=10){
                carry = 1;
                new_node->val = new_node_val-10;
            } 
            else{
                carry = 0;
                new_node->val = new_node_val;
            }
            
            prev->next = new_node;
            prev = new_node;
            l1 = l1->next;
            l2 = l2->next;
        }
        while(l1){
            ListNode* new_node = new ListNode();
            new_node->next = NULL;
            int new_node_val = (l1->val)+carry;
            if(new_node_val>=10){
                carry = 1;
                new_node->val = new_node_val-10;
            }
            else{
                carry = 0;
                new_node->val = new_node_val;
            }

            prev->next = new_node;
            prev = new_node;
            l1 = l1->next;
        }
        while(l2){
            ListNode* new_node = new ListNode();
            new_node->next = NULL;
            int new_node_val = l2->val+carry;
            if(new_node_val>=10){
                carry = 1;
                new_node->val = new_node_val-10;
            }
            else{
                carry = 0;
                new_node->val = new_node_val;
            }
            
            prev->next = new_node;
            prev = new_node;
            l2 = l2->next;
        }
        
        if(carry>0){
            ListNode* new_node = new ListNode();
            new_node->next = NULL;
            new_node->val = 1;
            prev->next = new_node;
        }
        return head;
    }